using System.Globalization;
using DT = System.Data;
using QC = Microsoft.Data.SqlClient;
using FineWoodworkingBasic.Util;
using System.Security.Cryptography.X509Certificates;
using System.Data.SqlTypes;

namespace FineWoodworkingBasic.Model
{
    public class Location : DeletablePersistable
    {

        public SqlGuid ID { get; protected set; } = new SqlGuid();
        public string Area { get; protected set; } = "";
        public string Locus { get; protected set; } = "";


        public Location()
        {
        }

        public Location(SqlGuid Id, string area, string locus)
        {
            ID = Id;
            Area = area;
            Locus = locus;
        }

        public Location(string area, string locus)
        {
            Area = area;
            Locus = locus;
        }

        public void SetValues(string area, string locus)
        {
            Area = area;
            Locus = locus;
        }
        public void Populate(SqlGuid idToUse)
        {
            Dictionary<string, Object> d = new Dictionary<string, Object>();
            d["id"] = idToUse;
            PopulateHelper(d);
        }

        protected override void ConstructPopulateQueryCommand(Dictionary<string, Object> dictIdToUse, QC.SqlCommand command)
        {
            QC.SqlParameter parameter;

            string query = @"SELECT * FROM Location WHERE (ID = @Id);";

            command.CommandText = query;

            parameter = new QC.SqlParameter("@Id", DT.SqlDbType.UniqueIdentifier);
            parameter.Value = dictIdToUse["id"];
            command.Parameters.Add(parameter);

        }

        protected override void ProcessPopulateQueryResult(QC.SqlDataReader reader)
        {
            while (reader.Read())
            {
                ID = reader.GetSqlGuid(reader.GetOrdinal("ID"));
                Area = reader.GetString(reader.GetOrdinal("Area"));
                Locus = reader.GetString(reader.GetOrdinal("Locus"));
            }
        }

        public override bool IsPopulated()
        {
            if (this.ID.IsNull) return false;
            return true;
        }

        protected override void SetupCommandForInsert(QC.SqlCommand command)
        {
            // Taking a 'PreparedStatement' approach here, avoids SQL Injection  
            // THIS IS IMPORTANT 

            QC.SqlParameter parameter;

            string insertQuery = "INSERT INTO Location (Area, Locus) " +
                " OUTPUT INSERTED.ID " +
                " VALUES (@Area, @Locus);";

            command.CommandText = insertQuery;

            parameter = new QC.SqlParameter("@Area", DT.SqlDbType.NVarChar, 10);  // Fix Type and Length 
            parameter.Value = Area;
            command.Parameters.Add(parameter);

            parameter = new QC.SqlParameter("@Locus", DT.SqlDbType.NVarChar, 25); // Fix Type and Length  
            parameter.Value = Locus;
            command.Parameters.Add(parameter);

        }

        protected override void SetupCommandForDelete(QC.SqlCommand command)
        {
            QC.SqlParameter parameter;

            string deleteQuery = "DELETE FROM Location " +
                " (WHERE ID = @ID)";

            command.CommandText = deleteQuery;

            parameter = new QC.SqlParameter("@ID", DT.SqlDbType.UniqueIdentifier);  // Fix Type and Length 
            parameter.Value = this.ID;
            command.Parameters.Add(parameter);
        }

        protected override void SetAutogeneratedIDFromInsert(SqlGuid genID)
        {
            this.ID = genID;
        }

        protected override void SetupCommandForUpdate(QC.SqlCommand command)
        {
            QC.SqlParameter parameter;

            string updateQuery = "UPDATE Location" +
               " SET Area = @Ara, Locus = @Locs " +
               " WHERE (ID = @Id);";

            command.CommandText = updateQuery;

            parameter = new QC.SqlParameter("@Ara", DT.SqlDbType.NVarChar, 10);  // Fix Type and Length 
            parameter.Value = Area;
            command.Parameters.Add(parameter);

            parameter = new QC.SqlParameter("@Locs", DT.SqlDbType.NVarChar, 25); // Fix Type and Length  
            parameter.Value = Locus;
            command.Parameters.Add(parameter);

            parameter = new QC.SqlParameter("@Id", DT.SqlDbType.UniqueIdentifier);  // Fix Type and Length 
            parameter.Value = ID;
            command.Parameters.Add(parameter);


        }

        protected override bool IsNewObject()
        {
            return !this.IsPopulated();
        }

        protected override ResultMessage GetResultMessageForPopulate()
        {
            ResultMessage mesg = new ResultMessage(ResultMessage.ResultMessageType.Success, "Location retrieved successfully!");
            return mesg;
        }

        protected override ResultMessage GetResultMessageForSave()
        {
            ResultMessage mesg = new ResultMessage(ResultMessage.ResultMessageType.Success, "Location with area: " + this.Area 
                    + " and locus: " + this.Locus 
                    + " saved successfully into database!");
            return mesg;
        }

        protected override ResultMessage GetErrorMessageForPopulate(Exception Ex)
        {
            ResultMessage mesg = new ResultMessage(ResultMessage.ResultMessageType.Error, "Error in retrieving Location from database!");
            return mesg;
        }

        protected override ResultMessage GetErrorMessageForSave(Exception Ex)
        {
            ResultMessage mesg = new ResultMessage(ResultMessage.ResultMessageType.Error, "Error in saving Location with area: " + this.Area
                    + " and locus: " + this.Locus
                    + " into database!");
            return mesg;
        }

        protected override ResultMessage GetResultMessageForDelete()
        {
            ResultMessage mesg = new ResultMessage(ResultMessage.ResultMessageType.Success, "Location with area: " + this.Area
                    + " and locus: " + this.Locus
                    + " deleted successfully from database!");
            return mesg;
        }

        protected override ResultMessage GetErrorMessageForDelete(Exception Ex)
        {
            ResultMessage mesg = new ResultMessage(ResultMessage.ResultMessageType.Error, "Error in deleting Location with area: " + this.Area
                    + " and locus: " + this.Locus
                    + " from database!");
            return mesg;
        }

        public override bool Equals(object? obj)
        {
            if (obj == null) return false;
            if (this.GetType() != obj.GetType()) return false;

            Location other = (Location)obj;

            if (!this.ID.Equals(other.ID)) return false;

            if (!this.Area.Equals(other.Area)) return false;

            if (!this.Locus.Equals(other.Locus)) return false;

            return true;
        }

        public override int GetHashCode()
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            return "\nLocation\n----------\n" +
                   $"   Area: {Area}\n" +
                   $"   Locus: {Locus}";
        }

    }
}
