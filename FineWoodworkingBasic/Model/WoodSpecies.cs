using System.Globalization;
using DT = System.Data;
using QC = Microsoft.Data.SqlClient;
using FineWoodworkingBasic.Util;
using System.Security.Cryptography.X509Certificates;
using static Azure.Core.HttpHeader;
using System.Collections.Generic;

namespace FineWoodworkingBasic.Model
{

    public class WoodSpecies : DeletablePersistable
    {

        protected int? ID { get; set; }
        protected string Name { get; set; }
        protected string Notes { get; set; }
        protected ResultMessage deleteMessage { get; set; }

        public WoodSpecies()
        {
            ID = 0;
            Name = "";
            Notes = "";
        }

        public WoodSpecies(int Id, string nm, string notes)
        {
            ID = Id;
            Name = nm;
            Notes = notes;
        }

        public WoodSpecies(string nm, string notes)
        {
            Name = nm;
            Notes = notes;
        }

        public void SetValues(string nm, string nts)
        {
            Name = nm;
            Notes = nts;
        }
        public void Populate(int idToUse)
        {
            string IDStr = idToUse + "";
            Dictionary<string, Object> d = new Dictionary<string, Object>();
            d["id"] = IDStr;
            PopulateHelper(d);
        }
       

        protected override void ConstructPopulateQueryCommand(Dictionary<string, Object> dictIdToUse, QC.SqlCommand command)
        {
            QC.SqlParameter parameter;

            string query = @"SELECT * FROM Brand WHERE (ID = @NP);";

            command.CommandText = query;

            parameter = new QC.SqlParameter("@NP", DT.SqlDbType.Int);
            parameter.Value = dictIdToUse["id"];
            command.Parameters.Add(parameter);

        }

        protected override void ProcessPopulateQueryResult(QC.SqlDataReader reader)
        {
            while (reader.Read())
            {
                ID = reader.GetInt32(0);
                Name = reader.GetString(1);
                Notes = reader.GetString(2);
            }
        }

        public override bool IsPopulated()
        {
            if (this.ID == null) return false;
            if (this.ID == 0) return false;
            return true;
        }

        protected override void SetupCommandForInsert(QC.SqlCommand command)
        {
            // Taking a 'PreparedStatement' approach here, avoids SQL Injection  
            // THIS IS IMPORTANT 

            QC.SqlParameter parameter;

            string insertQuery = "INSERT INTO SpeciesWood (Name, Notes) " +
                " OUTPUT INSERTED.ID " +
                " VALUES (@Name, @Notes);";

            command.CommandText = insertQuery;

            parameter = new QC.SqlParameter("@Name", DT.SqlDbType.NVarChar, 100);  // Fix Type and Length 
            parameter.Value = Name;
            command.Parameters.Add(parameter);

            parameter = new QC.SqlParameter("@Notes", DT.SqlDbType.NVarChar, 1000); // Fix Type and Length  
            parameter.Value = Notes;
            command.Parameters.Add(parameter);

        }

        protected override void SetupCommandForDelete(QC.SqlCommand command)
        {
            QC.SqlParameter parameter;

            string deleteQuery = "Delete From SpeciesWood " +
                " (WHERE ID = @ID)";

            command.CommandText = deleteQuery;

            parameter = new QC.SqlParameter("@ID", DT.SqlDbType.Int);  // Fix Type and Length 
            parameter.Value = this.ID;
            command.Parameters.Add(parameter);
        }

        
         

        protected override void SetAutogeneratedIDFromInsert(int genID)
        {
            this.ID = genID;
        }

        protected override void SetupCommandForUpdate(QC.SqlCommand command)
        {
            QC.SqlParameter parameter;

            string updateQuery = "UPDATE SpeciesWood" +
               " SET Name = @Name, Notes = @Notes " +
               " WHERE (ID = @Id);";

            command.CommandText = updateQuery;

            parameter = new QC.SqlParameter("@Name", DT.SqlDbType.NVarChar, 100);  // Fix Type and Length 
            parameter.Value = Name;
            command.Parameters.Add(parameter);

            parameter = new QC.SqlParameter("@Notes", DT.SqlDbType.NVarChar, 1000); // Fix Type and Length  
            parameter.Value = Notes;
            command.Parameters.Add(parameter);

            parameter = new QC.SqlParameter("@Id", DT.SqlDbType.Int);  // Fix Type and Length 
            parameter.Value = ID;
            command.Parameters.Add(parameter);


        }



        protected override bool IsNewObject()
        {
            if (ID == null)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        protected override ResultMessage GetResultMessageForPopulate()
        {
            ResultMessage mesg = new ResultMessage(ResultMessage.ResultMessageType.Success, "SpeciesWood with ID: " + this.ID +
                " retrieved successfully!");
            return mesg;
        }

        protected override ResultMessage GetResultMessageForSave()
        {
            ResultMessage mesg = new ResultMessage(ResultMessage.ResultMessageType.Success, "SpeciesWood with name: " + this.Name
                    + " saved successfully into database!");
            return mesg;
        }

        protected override ResultMessage GetErrorMessageForPopulate(Exception Ex)
        {
            ResultMessage mesg = new ResultMessage(ResultMessage.ResultMessageType.Error, "Error in retrieving SpeciesWood with ID: " + this.ID +
                " from database!");
            return mesg;
        }

        protected override ResultMessage GetErrorMessageForSave(Exception Ex)
        {
            ResultMessage mesg = new ResultMessage(ResultMessage.ResultMessageType.Error, "Error in saving SpeciesWood with Name: " + this.Name +
                " into database!");
            return mesg;
        }

        protected override ResultMessage GetResultMessageForDelete()
        {
            ResultMessage mesg = new ResultMessage(ResultMessage.ResultMessageType.Success, "SpeciesWood with name: " + this.Name
                    + " deleted successfully from database!");
            return mesg;
        }

        protected override ResultMessage GetErrorMessageForDelete(Exception Ex)
        {
            ResultMessage mesg = new ResultMessage(ResultMessage.ResultMessageType.Error, "Error in deleting SpeciesWood with Name: " + this.Name +
                " from database!");
            return mesg;
        }
      

        public override string ToString()
        {
            return "ID: " + ID + "; Name: " + Name + "; Notes: " + Notes + " ";
        }

    }

}