using System.Globalization;
using DT = System.Data;
using QC = Microsoft.Data.SqlClient;
using FineWoodworkingBasic.Util;
using System.Security.Cryptography.X509Certificates;
using System.Data.SqlTypes;

namespace FineWoodworkingBasic.Model
{

    public class ConstraintOfLocation : DeletablePersistable
    {

        protected SqlGuid? ID { get; set; }
        protected SqlGuid? ConstraintID { get; set; }
        protected SqlGuid? LocationID { get; set; }


        public ConstraintOfLocation()
        {
            ID = new SqlGuid();
            ConstraintID = new SqlGuid();
            LocationID = new SqlGuid();
        }

        public ConstraintOfLocation(SqlGuid Id, SqlGuid ConId, SqlGuid LocId)
        {
            ID = Id;
            ConstraintID = ConId;
            LocationID = LocId;
        }

        public ConstraintOfLocation(SqlGuid ConId, SqlGuid LocId)
        {
            ConstraintID = ConId;
            LocationID = LocId;
        }

        public void Populate(SqlGuid ConId, SqlGuid LocId)
        {
            string ConIdStr = ConId + "";
            string LocIdStr = LocId + "";
            Dictionary<string, Object> d = new Dictionary<string, Object>();
            d["ConId"] = ConIdStr;
            d["LocId"] = LocIdStr;
            PopulateHelper(d);
        }

        protected override void ConstructPopulateQueryCommand(Dictionary<string,Object>  dictIdToUse, QC.SqlCommand command)
        {
            QC.SqlParameter parameter;

            string query = @"SELECT * FROM ConstraintOfLocation WHERE (ConstraintID = @CID) AND (LocationID = @LID);";

            command.CommandText = query;

            parameter = new QC.SqlParameter("@CID", DT.SqlDbType.UniqueIdentifier);
            parameter.Value = dictIdToUse["ConId"];
            command.Parameters.Add(parameter);

            parameter = new QC.SqlParameter("@LID", DT.SqlDbType.UniqueIdentifier);
            parameter.Value = dictIdToUse["LocId"];
            command.Parameters.Add(parameter);

        }

        protected override void ProcessPopulateQueryResult( QC.SqlDataReader reader)
        {
            while (reader.Read())
            {
                ID = reader.GetSqlGuid(0);
                ConstraintID = reader.GetSqlGuid(1);
                LocationID = reader.GetSqlGuid(2);
            }
        }

        public override bool IsPopulated()
        {
            if (this.ID == null) return false;
            if (this.ID.Equals(0)) return false;
            return true;
        }

        protected override void SetupCommandForInsert(QC.SqlCommand command)
        {
            // Taking a 'PreparedStatement' approach here, avoids SQL Injection  
            // THIS IS IMPORTANT 

            QC.SqlParameter parameter;

            string insertQuery = "INSERT INTO ConstraintOfLocation (ConstraintID, LocationID) " +
                " OUTPUT INSERTED.ID " +
                " VALUES (@CID, @LID);";

            command.CommandText = insertQuery;

            parameter = new QC.SqlParameter("@CID", DT.SqlDbType.UniqueIdentifier);
            parameter.Value = this.ConstraintID;
            command.Parameters.Add(parameter);

            parameter = new QC.SqlParameter("@LID", DT.SqlDbType.UniqueIdentifier);
            parameter.Value = this.LocationID;
            command.Parameters.Add(parameter);
        }

        protected override void SetupCommandForDelete(QC.SqlCommand command)
        {
            QC.SqlParameter parameter;

            string deleteQuery = "DELETE FROM ConstraintOfLocation " +
                " (WHERE ID = @ID)";

            command.CommandText = deleteQuery;

            parameter = new QC.SqlParameter("@ID", DT.SqlDbType.UniqueIdentifier);  // Fix Type and Length 
            parameter.Value = this.ID;
            command.Parameters.Add(parameter);
        }

        protected override void SetAutogeneratedIDFromInsert(SqlGuid genID)
        {
            this.ID = genID;
        }

        protected override void SetupCommandForUpdate(QC.SqlCommand command)
        {
            throw new NotImplementedException();
        }

        protected override bool IsNewObject()
        {
            if (ID == null)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        protected override ResultMessage GetResultMessageForPopulate()
        {
            ResultMessage mesg = new ResultMessage(ResultMessage.ResultMessageType.Success, "ConstraintOfLocation with ID: " + this.ID + 
                " retrieved successfully!");
            return mesg;
        }

        protected override ResultMessage GetResultMessageForSave()
        {
            ResultMessage mesg = new ResultMessage(ResultMessage.ResultMessageType.Success, "ConstraintOfLocation with ID: " + this.ID
                + " saved successfully into database!");
            return mesg;
        }

        protected override ResultMessage GetErrorMessageForPopulate(Exception Ex)
        {
            ResultMessage mesg = new ResultMessage(ResultMessage.ResultMessageType.Error, "Error in retrieving ConstraintOfLocation with ID: " + this.ID +
                " from database!");
            return mesg;
        }

        protected override ResultMessage GetErrorMessageForSave(Exception Ex)
        {
            ResultMessage mesg = new ResultMessage(ResultMessage.ResultMessageType.Error, "Error in saving ConstraintOfLocation with ID: " + this.ID
                + " into database!");
            return mesg;
        }

        protected override ResultMessage GetResultMessageForDelete()
        {
            ResultMessage mesg = new ResultMessage(ResultMessage.ResultMessageType.Success, "ConstraintOfLocation with ID: " + this.ID
                    + " deleted successfully from database!");
            return mesg;
        }

        protected override ResultMessage GetErrorMessageForDelete(Exception Ex)
        {
            ResultMessage mesg = new ResultMessage(ResultMessage.ResultMessageType.Error, "Error in deleting ConstraintOfLocation with ID: " + this.ID +
                " from database!");
            return mesg;
        }

        public override string ToString()
        {
            return "ID: " + ID + "; " + "ConstraintID: " + ConstraintID + "; " + "LocationID: " + LocationID + "; ";
        }

    }

}