@page "/authtest"
@using FineWoodworkingBasic.Authentication;
@using FineWoodworkingBasic.Authentication.Provider;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.Data.SqlClient;
@using FineWoodworkingBasic.Util;
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationService AuthenticationService
@inject UsersTable ut
@inject NavigationManager NavigationManager
@namespace FineWoodworkingBasic.Pages

@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <NotAuthorized>
        <p>
            Username: <input @bind="userIdentifierRegister" />
            Password: <input @bind="pswRegister" />
            <button @onclick="Register">Register</button>
        </p>
        <p>
            Username: <input @bind="userIdentifierLogin" />
            Password: <input @bind="pswLogin" />
            <button @onclick="Login">Login</button>
        </p>
    </NotAuthorized>
    <Authorized>
        <p>
            <button @onclick="Logout">Logout</button>
        </p>
        <p>
            <button @onclick="MakeAdmin">Make Current Logged In User an Admin</button>
        </p>
    </Authorized>
</AuthorizeView>

<p>
    <button @onclick="Create">Create Tables</button>
</p>
<br />
<AuthorizeView>
    <Authorized>
        <p>Hello, @context.User.Identity?.Name!</p>
    </Authorized>
    <NotAuthorized>
        <p>You're not authorized.</p>
    </NotAuthorized>
</AuthorizeView>
<AuthorizeView Roles="User">
    <Authorized>
        <p>You are a User.</p>
    </Authorized>
</AuthorizeView>
<AuthorizeView Roles="Admin">
    <Authorized>
        <p>You are an Admin.</p>
    </Authorized>
</AuthorizeView>

@code {
    public string userIdentifierRegister = string.Empty;
    public string userIdentifierLogin = string.Empty;
    public string pswRegister = string.Empty;
    public string pswLogin = string.Empty;

    private async void Register()
    {
        var user = new ApplicationUser { UserName = userIdentifierRegister };
        var result = await UserManager.CreateAsync(user, pswRegister);
        if (result.Succeeded)
        {
            AuthenticationService.SetUser(user.UserName, user.Role);
        }
    }
    private async void Login()
    {
        if (!string.IsNullOrWhiteSpace(userIdentifierLogin) && !string.IsNullOrWhiteSpace(pswLogin))
        {
            var user = await UserManager.FindByNameAsync(userIdentifierLogin);
            if (user != null && await UserManager.CheckPasswordAsync(user, pswLogin))
            {
                AuthenticationService.SetUser(user.UserName, user.Role);
            }
        }
    }
    private void Logout()
    {
        AuthenticationService.LogoutUser();
    }
    private async void Create()
    {
        bool userResult = await ut.CreateUsersTableAsync();
        bool rolesResult = await ut.CreateRolesTableAsync();
    }
    private async void MakeAdmin()
    {
        string currentUserName = AuthenticationService.CurrentUser.Identity?.Name!;
        if (await ut.SetUserRole(currentUserName, "Admin"))
        {
            AuthenticationService.LogoutUser();
            var user = await UserManager.FindByNameAsync(currentUserName);
            AuthenticationService.SetUser(user.UserName, user.Role);
        }
    }
}