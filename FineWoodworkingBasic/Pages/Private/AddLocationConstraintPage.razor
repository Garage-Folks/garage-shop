@page "/add-location-constraint"
@using FineWoodworkingBasic.Service
@using FineWoodworkingBasic.Model
@using System.ComponentModel.DataAnnotations
@inject AddLocationConstraintService svc
@inject AllStateInfoService FullState

<PageTitle>Add Location Constraint</PageTitle>
<EditForm Model="model" OnValidSubmit="OnValidSubmit">
<DataAnnotationsValidator/>
    <MudCard>
        <MudCardContent>
            <MudText Align="Align.Center" Typo="Typo.h5">Add a Location Constraint</MudText>
            <MudDivider DividerType="DividerType.Middle" Light="true" />
            <br />

            <MudTextField T="string" Label="Description" Clearable="true" Counter="2000" Immediate="true" Variant="Variant.Text"
                          @bind-Value="model.Description" Validation="@(new Func<string, IEnumerable<string>>(MaxTwoThouCharacters))" />
            
        </MudCardContent>

        <MudCardActions>
            @*Clear Button*@
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="ClearAll"
                       Class="mr-3 ml-2">
                @if (spin)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                }
                else
                {
                    <MudText>Clear</MudText>
                }
            </MudButton>

            @*Submit Button with loading *@
            <MudButton ButtonType="ButtonType.Submit" DisableElevation="true" Variant="Variant.Filled" Color="Color.Primary">
                @if (spin)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                }
                else
                {
                    <MudText>Add</MudText>
                }
            </MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>
@*Status Message*@
<MudText Color="msgColor">@addLocationConstraintMessage</MudText>

@*
@code {
    Location location = new Location();
    List<Location> locusViaAreaList = new List<Location>();

    private string addLocationConstraintMessage { get; set; }
    private string Description { get; set; }

    AddLocationConstraintForm model = new AddLocationConstraintForm();


    private async void OnValidSubmit(EditContext context)
    {
        ResultMessage retMsg = await svc.AddLocationConstraintAsync(model.FormDescription);
        addLocationConstraintMessage = retMsg.Message;
        StateHasChanged();
        Clear();

    }

    public void Clear()
    {
        model.FormDescription = "";
    }
    public class AddLocationConstraintForm
    {
        [Required(ErrorMessage = "Description field must have a value.")]
        [StringLength(2000, ErrorMessage = "Description length can't be more than 2000.")]
        public string FormDescription { get; set; }
    }
}*@